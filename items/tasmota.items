String Sonoff_Current_FW_Available "Current Release [%s]" <sonoff_basic> { http="<[tasmotaRelease:10000:JSONPATH($[0].name)]"}

Group gCurrents <current>
Group:Number:SUM gCurrentsSum "Gesamt [%.3f A]" <current> (gCurrents)
Group gPower <power>
Group:Number:SUM gPowerSum "Gesamt [%d W]" <energy> (gPower)

// Funktion
Switch abendlicht "Abendlicht" <light> (gSockets) ["Lighting"] {mqtt="<[mqtt:tele/abendlicht/STATE:state:JSONPATH($.POWER)], >[mqtt:cmnd/abendlicht/power:command:*:default]"}
Number abendlicht_rssi "RSSI [%d %%]" { mqtt="<[mqtt:tele/abendlicht/STATE:state:JSONPATH($.Wifi.RSSI)]" }
DateTime abendlicht_lastupdate "Aktualisierung [%1$td.%1$tm.%1$tY, %1$tH:%1$tM]" <time> { mqtt="<[mqtt:tele/abendlicht/STATE:state:JSONPATH($.Time)]"}
String abendlicht_firmware "Firmware [%s]" { mqtt="<[mqtt:tele/abendlicht/INFO1:state:JSONPATH($.Version)]"}

// Funktion
Switch kfroster "Froster Keller" <poweroutlet> (gSockets) {mqtt="<[mqtt:tele/kfroster/POWER:state:default], >[mqtt:cmnd/kfroster/power:command:*:default]"}
Number kfroster_rssi "RSSI [%d %%]" { mqtt="<[mqtt:tele/kfroster/STATE:state:JSONPATH($.Wifi.RSSI)]" }
DateTime kfroster_lastupdate "Aktualisierung [%1$td.%1$tm.%1$tY, %1$tH:%1$tM]" <time> { mqtt="<[mqtt:tele/kfroster/STATE:state:JSONPATH($.Time)]"}
String kfroster_firmware "Firmware [%s]" { mqtt="<[mqtt:tele/kfroster/INFO1:state:JSONPATH($.Version)]"}
Number kfroster_total "Verbrauch gesamt [%.3f kWh]" { mqtt="<[mqtt:tele/kfroster/ENERGY:state:JSONPATH($.Total)]" }
Number kfroster_yesterday "Verbrauch gestern [%.3f kWh]" { mqtt="<[mqtt:tele/kfroster/ENERGY:state:JSONPATH($.Yesterday)]" }
Number kfroster_today "Verbrauch heute [%.3f kWh]" { mqtt="<[mqtt:tele/kfroster/ENERGY:state:JSONPATH($.Today)]" }
Number kfroster_power "Froster Keller [%d W]" <energy> (gPower,gPowerSum) { mqtt="<[mqtt:tele/kfroster/ENERGY:state:JSONPATH($.Power)]" }
Number kfroster_factor "Faktor [%.2f]" { mqtt="<[mqtt:tele/kfroster/ENERGY:state:JSONPATH($.Factor)]" }
Number kfroster_voltage "Spannung aktuell [%d V]" { mqtt="<[mqtt:tele/kfroster/ENERGY:state:JSONPATH($.Voltage)]" }
Number kfroster_current "Froster Keller [%.3f A]" <current> (gCurrents,gCurrentsSum) { mqtt="<[mqtt:tele/kfroster/ENERGY:state:JSONPATH($.Current)]" }

// Funktion
Switch froster "Froster Küche" <poweroutlet> (gSockets) {mqtt="<[mqtt:tele/froster/POWER:state:default], >[mqtt:cmnd/froster/power:command:*:default]"}
Number froster_rssi "RSSI [%d %%]" { mqtt="<[mqtt:tele/froster/STATE:state:JSONPATH($.Wifi.RSSI)]" }
DateTime froster_lastupdate "Aktualisierung [%1$td.%1$tm.%1$tY, %1$tH:%1$tM]" <time> { mqtt="<[mqtt:tele/froster/STATE:state:JSONPATH($.Time)]"}
String froster_firmware "Firmware [%s]" { mqtt="<[mqtt:tele/froster/INFO1:state:JSONPATH($.Version)]"}
Number froster_total "Verbrauch gesamt [%.3f kWh]" { mqtt="<[mqtt:tele/froster/ENERGY:state:JSONPATH($.Total)]" }
Number froster_yesterday "Verbrauch gestern [%.3f kWh]" { mqtt="<[mqtt:tele/froster/ENERGY:state:JSONPATH($.Yesterday)]" }
Number froster_today "Verbrauch heute [%.3f kWh]" { mqtt="<[mqtt:tele/froster/ENERGY:state:JSONPATH($.Today)]" }
Number froster_power "Froster Küche [%d W]" <energy> (gPower,gPowerSum) { mqtt="<[mqtt:tele/froster/ENERGY:state:JSONPATH($.Power)]" }
Number froster_factor "Faktor [%.2f]" { mqtt="<[mqtt:tele/froster/ENERGY:state:JSONPATH($.Factor)]" }
Number froster_voltage "Spannung aktuell [%d V]" { mqtt="<[mqtt:tele/froster/ENERGY:state:JSONPATH($.Voltage)]" }
Number froster_current "Froster Küche [%.3f A]" <current> (gCurrents,gCurrentsSum) { mqtt="<[mqtt:tele/froster/ENERGY:state:JSONPATH($.Current)]" }

// Funktion
Switch heizung "Heizung" <poweroutlet> (gSockets) {mqtt="<[mqtt:tele/heizung/POWER:state:default], >[mqtt:cmnd/heizung/power:command:*:default]"}
Number heizung_rssi "RSSI [%d %%]" { mqtt="<[mqtt:tele/heizung/STATE:state:JSONPATH($.Wifi.RSSI)]" }
DateTime heizung_lastupdate "Aktualisierung [%1$td.%1$tm.%1$tY, %1$tH:%1$tM]" <time> { mqtt="<[mqtt:tele/heizung/STATE:state:JSONPATH($.Time)]"}
String heizung_firmware "Firmware [%s]" { mqtt="<[mqtt:tele/heizung/INFO1:state:JSONPATH($.Version)]"}
Number heizung_total "Verbrauch gesamt [%.3f kWh]" { mqtt="<[mqtt:tele/heizung/ENERGY:state:JSONPATH($.Total)]" }
Number heizung_yesterday "Verbrauch gestern [%.3f kWh]" { mqtt="<[mqtt:tele/heizung/ENERGY:state:JSONPATH($.Yesterday)]" }
Number heizung_today "Verbrauch heute [%.3f kWh]" { mqtt="<[mqtt:tele/heizung/ENERGY:state:JSONPATH($.Today)]" }
Number heizung_power "Heizung [%d W]" <energy> (gPower,gPowerSum) { mqtt="<[mqtt:tele/heizung/ENERGY:state:JSONPATH($.Power)]" }
Number heizung_factor "Faktor [%.2f]" { mqtt="<[mqtt:tele/heizung/ENERGY:state:JSONPATH($.Factor)]" }
Number heizung_voltage "Spannung aktuell [%d V]" { mqtt="<[mqtt:tele/heizung/ENERGY:state:JSONPATH($.Voltage)]" }
Number heizung_current "Heizung [%.3f A]" <current> (gCurrents,gCurrentsSum) { mqtt="<[mqtt:tele/heizung/ENERGY:state:JSONPATH($.Current)]" }

// Funktion
Switch waesche "Waschmaschine" <poweroutlet> (gSockets) {mqtt="<[mqtt:tele/waesche/POWER:state:default], >[mqtt:cmnd/waesche/power:command:*:default]"}
Number waesche_rssi "RSSI [%d %%]" { mqtt="<[mqtt:tele/waesche/STATE:state:JSONPATH($.Wifi.RSSI)]" }
DateTime waesche_lastupdate "Aktualisierung [%1$td.%1$tm.%1$tY, %1$tH:%1$tM]" <time> { mqtt="<[mqtt:tele/waesche/STATE:state:JSONPATH($.Time)]"}
String waesche_firmware "Firmware [%s]" { mqtt="<[mqtt:tele/waesche/INFO1:state:JSONPATH($.Version)]"}
Number waesche_total "Verbrauch gesamt [%.3f kWh]" { mqtt="<[mqtt:tele/waesche/ENERGY:state:JSONPATH($.Total)]" }
Number waesche_yesterday "Verbrauch gestern [%.3f kWh]" { mqtt="<[mqtt:tele/waesche/ENERGY:state:JSONPATH($.Yesterday)]" }
Number waesche_today "Verbrauch heute [%.3f kWh]" { mqtt="<[mqtt:tele/waesche/ENERGY:state:JSONPATH($.Today)]" }
Number waesche_power "Waschmaschine [%d W]" <energy> (gPower,gPowerSum) { mqtt="<[mqtt:tele/waesche/ENERGY:state:JSONPATH($.Power)]" }
Number waesche_factor "Faktor [%.2f]" { mqtt="<[mqtt:tele/waesche/ENERGY:state:JSONPATH($.Factor)]" }
Number waesche_voltage "Spannung aktuell [%d V]" { mqtt="<[mqtt:tele/waesche/ENERGY:state:JSONPATH($.Voltage)]" }
Number waesche_current "Waschmaschine [%.3f A]" <current> (gCurrents,gCurrentsSum) { mqtt="<[mqtt:tele/waesche/ENERGY:state:JSONPATH($.Current)]" }

// Funktion
Switch sonoff1 "Sonoff1" <poweroutlet> (gSockets) {mqtt="<[mqtt:tele/sonoff1/STATE:state:JSONPATH($.POWER1)], >[mqtt:cmnd/sonoff1/power:command:*:default]"}
Number sonoff1_rssi "RSSI [%d %%]" { mqtt="<[mqtt:tele/sonoff1/STATE:state:JSONPATH($.Wifi.RSSI)]" }
DateTime sonoff1_lastupdate "Aktualisierung [%1$td.%1$tm.%1$tY, %1$tH:%1$tM]" <time> { mqtt="<[mqtt:tele/sonoff1/STATE:state:JSONPATH($.Time)]"}
String sonoff1_firmware "Firmware [%s]" { mqtt="<[mqtt:tele/sonoff1/INFO1:state:JSONPATH($.Version)]"}
Number sonoff1_total "Verbrauch gesamt [%.3f kWh]" { mqtt="<[mqtt:tele/sonoff1/SENSOR:state:JSONPATH($.ENERGY.Total)]" }
Number sonoff1_yesterday "Verbrauch gestern [%.3f kWh]" { mqtt="<[mqtt:tele/sonoff1/SENSOR:state:JSONPATH($.ENERGY.Yesterday)]" }
Number sonoff1_today "Verbrauch heute [%.3f kWh]" { mqtt="<[mqtt:tele/sonoff1/SENSOR:state:JSONPATH($.ENERGY.Today)]" }
Number sonoff1_power "Sonoff1 [%d W]" <energy> (gPower,gPowerSum) { mqtt="<[mqtt:tele/sonoff1/SENSOR:state:JSONPATH($.ENERGY.Power)]" }
Number sonoff1_factor "Faktor [%.2f]" { mqtt="<[mqtt:tele/sonoff1/SENSOR:state:JSONPATH($.ENERGY.Factor)]" }
Number sonoff1_voltage "Spannung aktuell [%d V]" { mqtt="<[mqtt:tele/sonoff1/SENSOR:state:JSONPATH($.ENERGY.Voltage)]" }
Number sonoff1_current "Sonoff1 [%.3f A]" <current> (gCurrents,gCurrentsSum) { mqtt="<[mqtt:tele/sonoff1/SENSOR:state:JSONPATH($.ENERGY.Current)]" }

// Funktion
Switch server "IT-Schrank" <poweroutlet> (gSockets) {mqtt="<[mqtt:tele/server/STATE:state:JSONPATH($.POWER1)], >[mqtt:cmnd/server/power:command:*:default]"}
Number server_rssi "RSSI [%d %%]" { mqtt="<[mqtt:tele/server/STATE:state:JSONPATH($.Wifi.RSSI)]" }
DateTime server_lastupdate "Aktualisierung [%1$td.%1$tm.%1$tY, %1$tH:%1$tM]" <time> { mqtt="<[mqtt:tele/server/STATE:state:JSONPATH($.Time)]"}
String server_firmware "Firmware [%s]" { mqtt="<[mqtt:tele/server/INFO1:state:JSONPATH($.Version)]"}
Number server_total "Verbrauch gesamt [%.3f kWh]" { mqtt="<[mqtt:tele/server/SENSOR:state:JSONPATH($.ENERGY.Total)]" }
Number server_yesterday "Verbrauch gestern [%.3f kWh]" { mqtt="<[mqtt:tele/server/SENSOR:state:JSONPATH($.ENERGY.Yesterday)]" }
Number server_today "Verbrauch heute [%.3f kWh]" { mqtt="<[mqtt:tele/server/SENSOR:state:JSONPATH($.ENERGY.Today)]" }
Number server_power "IT-Schrank [%d W]" <energy> (gPower,gPowerSum) { mqtt="<[mqtt:tele/server/SENSOR:state:JSONPATH($.ENERGY.Power)]" }
Number server_factor "Faktor [%.2f]" { mqtt="<[mqtt:tele/server/SENSOR:state:JSONPATH($.ENERGY.Factor)]" }
Number server_voltage "Spannung aktuell [%d V]" { mqtt="<[mqtt:tele/server/SENSOR:state:JSONPATH($.ENERGY.Voltage)]" }
Number server_current "Server [%.3f A]" <current> (gCurrents,gCurrentsSum) { mqtt="<[mqtt:tele/server/SENSOR:state:JSONPATH($.ENERGY.Current)]" }

// Funktion
Switch sonoff3 "Sonoff3" <poweroutlet> (gSockets) {mqtt="<[mqtt:tele/sonoff3/STATE:state:JSONPATH($.POWER1)], >[mqtt:cmnd/sonoff3/power:command:*:default]"}
Number sonoff3_rssi "RSSI [%d %%]" { mqtt="<[mqtt:tele/sonoff3/STATE:state:JSONPATH($.Wifi.RSSI)]" }
DateTime sonoff3_lastupdate "Aktualisierung [%1$td.%1$tm.%1$tY, %1$tH:%1$tM]" <time> { mqtt="<[mqtt:tele/sonoff3/STATE:state:JSONPATH($.Time)]"}
String sonoff3_firmware "Firmware [%s]" { mqtt="<[mqtt:tele/sonoff3/INFO1:state:JSONPATH($.Version)]"}
Number sonoff3_total "Verbrauch gesamt [%.3f kWh]" { mqtt="<[mqtt:tele/sonoff3/SENSOR:state:JSONPATH($.ENERGY.Total)]" }
Number sonoff3_yesterday "Verbrauch gestern [%.3f kWh]" { mqtt="<[mqtt:tele/sonoff3/SENSOR:state:JSONPATH($.ENERGY.Yesterday)]" }
Number sonoff3_today "Verbrauch heute [%.3f kWh]" { mqtt="<[mqtt:tele/sonoff3/SENSOR:state:JSONPATH($.ENERGY.Today)]" }
Number sonoff3_power "Sonoff3 [%d W]" <energy> (gPower,gPowerSum) { mqtt="<[mqtt:tele/sonoff3/SENSOR:state:JSONPATH($.ENERGY.Power)]" }
Number sonoff3_factor "Faktor [%.2f]" { mqtt="<[mqtt:tele/sonoff3/SENSOR:state:JSONPATH($.ENERGY.Factor)]" }
Number sonoff3_voltage "Spannung aktuell [%d V]" { mqtt="<[mqtt:tele/sonoff3/SENSOR:state:JSONPATH($.ENERGY.Voltage)]" }
Number sonoff3_current "Sonoff3 [%.3f A]" <current> (gCurrents,gCurrentsSum) { mqtt="<[mqtt:tele/sonoff3/SENSOR:state:JSONPATH($.ENERGY.Current)]" }

// Funktion
Switch schlafzimmer "Schlafzimmerlicht" <light> (gSockets) [ "Lighting" ] {mqtt="<[mqtt:tele/schlafzimmer/STATE:state:JSONPATH($.POWER1)], >[mqtt:cmnd/schlafzimmer/power:command:*:default]"}
Number schlafzimmer_rssi "RSSI [%d %%]" { mqtt="<[mqtt:tele/schlafzimmer/STATE:state:JSONPATH($.Wifi.RSSI)]" }
DateTime schlafzimmer_lastupdate "Aktualisierung [%1$td.%1$tm.%1$tY, %1$tH:%1$tM]" <time> { mqtt="<[mqtt:tele/schlafzimmer/STATE:state:JSONPATH($.Time)]"}
String schlafzimmer_firmware "Firmware [%s]" { mqtt="<[mqtt:tele/schlafzimmer/INFO1:state:JSONPATH($.Version)]"}
Number schlafzimmer_total "Verbrauch gesamt [%.3f kWh]" { mqtt="<[mqtt:tele/schlafzimmer/SENSOR:state:JSONPATH($.ENERGY.Total)]" }
Number schlafzimmer_yesterday "Verbrauch gestern [%.3f kWh]" { mqtt="<[mqtt:tele/schlafzimmer/SENSOR:state:JSONPATH($.ENERGY.Yesterday)]" }
Number schlafzimmer_today "Verbrauch heute [%.3f kWh]" { mqtt="<[mqtt:tele/schlafzimmer/SENSOR:state:JSONPATH($.ENERGY.Today)]" }
Number schlafzimmer_power "Schlafzimmer [%d W]" <energy> (gPower,gPowerSum) { mqtt="<[mqtt:tele/schlafzimmer/SENSOR:state:JSONPATH($.ENERGY.Power)]" }
Number schlafzimmer_factor "Faktor [%.2f]" { mqtt="<[mqtt:tele/schlafzimmer/SENSOR:state:JSONPATH($.ENERGY.Factor)]" }
Number schlafzimmer_voltage "Spannung aktuell [%d V]" { mqtt="<[mqtt:tele/schlafzimmer/SENSOR:state:JSONPATH($.ENERGY.Voltage)]" }
Number schlafzimmer_current "Schlafzimmer [%.3f A]" <current> (gCurrents,gCurrentsSum) { mqtt="<[mqtt:tele/schlafzimmer/SENSOR:state:JSONPATH($.ENERGY.Current)]" }


// Funktion
Switch akkulader "Akkulader" <poweroutlet> (gSockets) ["Lighting"] {mqtt="<[mqtt:tele/akkulader/POWER1:state:default], >[mqtt:cmnd/akkulader/power:command:*:default]"}
Number akkulader_rssi "RSSI [%d %%]" { mqtt="<[mqtt:tele/akkulader/STATE:state:JSONPATH($.Wifi.RSSI)]" }
DateTime akkulader_lastupdate "Aktualisierung [%1$td.%1$tm.%1$tY, %1$tH:%1$tM]" <time> { mqtt="<[mqtt:tele/akkulader/STATE:state:JSONPATH($.Time)]"}
String akkulader_firmware "Firmware [%s]" { mqtt="<[mqtt:tele/akkulader/INFO1:state:JSONPATH($.Version)]"}
Number akkulader_total "Verbrauch gesamt [%.3f kWh]" { mqtt="<[mqtt:tele/akkulader/SENSOR:state:JSONPATH($.ENERGY.Total)]" }
Number akkulader_yesterday "Verbrauch gestern [%.3f kWh]" { mqtt="<[mqtt:tele/akkulader/SENSOR:state:JSONPATH($.ENERGY.Yesterday)]" }
Number akkulader_today "Verbrauch heute [%.3f kWh]" { mqtt="<[mqtt:tele/akkulader/SENSOR:state:JSONPATH($.ENERGY.Today)]" }
Number akkulader_power "Akkulader [%d W]" <energy> (gPower,gPowerSum) { mqtt="<[mqtt:tele/akkulader/SENSOR:state:JSONPATH($.ENERGY.Power)]" }
Number akkulader_factor "Faktor [%.2f]" { mqtt="<[mqtt:tele/akkulader/SENSOR:state:JSONPATH($.ENERGY.Factor)]" }
Number akkulader_voltage "Spannung aktuell [%d V]" { mqtt="<[mqtt:tele/akkulader/SENSOR:state:JSONPATH($.ENERGY.Voltage)]" }
Number akkulader_current "Akkulader [%.3f A]" <current> (gCurrents,gCurrentsSum) { mqtt="<[mqtt:tele/akkulader/SENSOR:state:JSONPATH($.ENERGY.Current)]" }

Group gEingang
Switch eingangslicht "Eingangslicht" <light> (gEingang, gSockets) ["Lighting"] {mqtt="<[mqtt:tele/eingangslicht/STATE:state:JSONPATH($.POWER1)], >[mqtt:cmnd/eingangslicht/power1:command:*:default]"}
Switch eingangslicht_fade "Fading" (gEingang) {mqtt="<[mqtt:tele/eingangslicht/STATE:state:JSONPATH($.Fade)], >[mqtt:cmnd/eingangslicht/fade:command:*:default]"}
Number eingangslicht_fadetime "Fadespeed [%.0f]" (gEingang) {mqtt="<[mqtt:tele/eingangslicht/STATE:state:JSONPATH($.Speed)], >[mqtt:cmnd/eingangslicht/Speed:command:*:default]"}
Number eingangslicht_standard "Mindesthelligkeit [%.0f]" (gEingang)
Dimmer eingangslicht_dimmer "Helligkeit [%.0f %%]" <light> (gEingang, gSockets) ["Lighting"] {mqtt="<[mqtt:tele/eingangslicht/STATE:state:JSONPATH($.Dimmer)], >[mqtt:cmnd/eingangslicht/Dimmer:command:*:default]"}
Number eingangslicht_rssi "RSSI [%d %%]" { mqtt="<[mqtt:tele/eingangslicht/STATE:state:JSONPATH($.Wifi.RSSI)]" }
DateTime eingangslicht_lastupdate "Aktualisierung [%1$td.%1$tm.%1$tY, %1$tH:%1$tM]" <time> { mqtt="<[mqtt:tele/eingangslicht/STATE:state:JSONPATH($.Time)]"}
String eingangslicht_firmware "Firmware [%s]" { mqtt="<[mqtt:tele/eingangslicht/INFO1:state:JSONPATH($.Version)]"}
Number eingangslicht_humi "Luftfeuchtigkeit [%d %%]" { mqtt="<[mqtt:tele/eingangslicht/SENSOR:state:JSONPATH($.DHT11.Humidity)]" }
Number eingangslicht_temp "Temperatur [%d %%]" { mqtt="<[mqtt:tele/eingangslicht/SENSOR:state:JSONPATH($.DHT11.Temperature)]" }

Contact eingangstuer "Eingangstür [MAP(contacts.map):%s]" <door> (gDoors, gDoorStatus) {mqtt="<[mqtt:stat/eingangstuer/POWER2:state:MAP(OFF_OPEN.map)]"}
Contact flurtuer "Flurtür [MAP(contacts.map):%s]" <door> (gDoors, gDoorStatus) {mqtt="<[mqtt:stat/eingangstuer/POWER1:state:MAP(OFF_OPEN.map)]"}
Contact bewegungflur "Bewegung Flur [MAP(contacts.map):%s]" <motion> (gMotion) {mqtt="<[mqtt:stat/eingangstuer/POWER3:state:MAP(ON_OPEN.map)]"}
Number eingangstuer_rssi "RSSI [%d %%]" { mqtt="<[mqtt:tele/eingangstuer/STATE:state:JSONPATH($.Wifi.RSSI)]" }
DateTime eingangstuer_lastupdate "Aktualisierung [%1$td.%1$tm.%1$tY, %1$tH:%1$tM]" <time> { mqtt="<[mqtt:tele/eingangstuer/STATE:state:JSONPATH($.Time)]"}
String eingangstuer_firmware "Firmware [%s]" { mqtt="<[mqtt:tele/eingangstuer/INFO1:state:JSONPATH($.Version)]"}
Number eingangstuer_humi "Luftfeuchtigkeit [%d %%]" { mqtt="<[mqtt:tele/eingangstuer/SENSOR:state:JSONPATH($.DHT11.Humidity)]" }
Number eingangstuer_temp "Temperatur [%d %%]" { mqtt="<[mqtt:tele/eingangstuer/SENSOR:state:JSONPATH($.DHT11.Temperature)]" }
